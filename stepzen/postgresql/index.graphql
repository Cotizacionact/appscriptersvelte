type Comment {
  created_at: DateTime!
  id: ID!
  parent: ID!
  posts: Posts @materializer(query: "postsUsingComment_parent_fkey")
  replay: [Replay] @materializer(query: "replayUsingReplay_parent_fkey")
  text: String!
}

type Posts {
  Image: String
  Review: Float
  Text: String
  Title: String!
  Type: String
  comment: [Comment] @materializer(query: "commentUsingComment_parent_fkey")
  created_at: DateTime!
  id: ID!
}

type Replay {
  comment: Comment @materializer(query: "commentUsingReplay_parent_fkey")
  created_at: DateTime!
  id: ID!
  parent: ID!
  text: String!
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
  " Queries for type 'Comment' "
  comment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Comment"
      configuration: "postgresql_config"
    )
  commentList: [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Comment"
      configuration: "postgresql_config"
    )
  commentPaginatedList(first: Int, after: Int): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "parent", "text" FROM "Comment" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  commentUsingComment_parent_fkey(id: ID!): [Comment]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "parent", "text" FROM "Comment" WHERE "parent" = $1
      """
      configuration: "postgresql_config"
    )
  commentUsingReplay_parent_fkey(parent: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "parent", "text" FROM "Comment" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Posts' "
  posts(id: ID!): Posts
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Posts"
      configuration: "postgresql_config"
    )
  postsList: [Posts]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Posts"
      configuration: "postgresql_config"
    )
  postsPaginatedList(first: Int, after: Int): [Posts]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "Image", "Review", "Text", "Title", "Type", "created_at", "id" FROM "Posts" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  postsUsingComment_parent_fkey(parent: ID!): Posts
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "Image", "Review", "Text", "Title", "Type", "created_at", "id" FROM "Posts" WHERE "id" = $1
      """
      configuration: "postgresql_config"
    )
  " Queries for type 'Replay' "
  replay(id: ID!): Replay
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Replay"
      configuration: "postgresql_config"
    )
  replayList: [Replay]
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Replay"
      configuration: "postgresql_config"
    )
  replayPaginatedList(first: Int, after: Int): [Replay]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "parent", "text" FROM "Replay" ORDER BY "id" LIMIT $1 OFFSET $2
      """
      configuration: "postgresql_config"
    )
  replayUsingReplay_parent_fkey(id: ID!): [Replay]
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      SELECT "created_at", "id", "parent", "text" FROM "Replay" WHERE "parent" = $1
      """
      configuration: "postgresql_config"
    )
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
  " Mutations for type 'Comment' "
  deleteComment(id: ID!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Comment"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertComment(parent: ID!, text: String!, created_at: DateTime!): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Comment"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateComment(
    id: ID!
    created_at: DateTime
    parent: ID
    text: String
  ): Comment
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "Comment" SET
        "created_at" = COALESCE($2, "created_at"),
        "parent" = COALESCE($3, "parent"),
        "text" = COALESCE($4, "text")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Posts' "
  deletePosts(id: ID!): Posts
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Posts"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertPosts(
    Title: String!
    Review: Float
    Text: String
    created_at: DateTime!
    Image: String
    Type: String
  ): Posts
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Posts"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updatePosts(
    id: ID!
    Image: String
    Review: Float
    Text: String
    Title: String
    Type: String
    created_at: DateTime
  ): Posts
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "Posts" SET
        "Image" = COALESCE($2, "Image"),
        "Review" = COALESCE($3, "Review"),
        "Text" = COALESCE($4, "Text"),
        "Title" = COALESCE($5, "Title"),
        "Type" = COALESCE($6, "Type"),
        "created_at" = COALESCE($7, "created_at")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
  " Mutations for type 'Replay' "
  deleteReplay(id: ID!): Replay
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Replay"
      dml: DELETE
      configuration: "postgresql_config"
    )
  insertReplay(parent: ID!, text: String!, created_at: DateTime!): Replay
    @dbquery(
      type: "postgresql"
      schema: "public"
      table: "Replay"
      dml: INSERT
      configuration: "postgresql_config"
    )
  updateReplay(id: ID!, created_at: DateTime, parent: ID, text: String): Replay
    @dbquery(
      type: "postgresql"
      schema: "public"
      query: """
      UPDATE "Replay" SET
        "created_at" = COALESCE($2, "created_at"),
        "parent" = COALESCE($3, "parent"),
        "text" = COALESCE($4, "text")
      WHERE
        "id" = $1
      RETURNING *
      """
      configuration: "postgresql_config"
    )
}
